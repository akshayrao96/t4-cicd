# global keyword is required to identify the section for all global properties (Req #C3) at the top level.
global:
  # pipeline_name keyword is required to identify name of the pipeline
  # can be different from yaml file name
  # must be unique within this repo
  # used to identify the pipeline in the controller and for all
  # subsequent operations (Req #C3.1)
  pipeline_name: valid_pipeline

  # Global Keys/Variables can be set here for all stages and jobs.(Req #C3.2)
  # Although these are optional, for certain keys if they are not defined here, they must be defined for each jobs

  # docker_registry - only dockerhub is currently supported out of the box, putting 'dockerhub' as the value will point to dockerhub.
  # If no value is specified , will use dockerhub as default
  # For other container registries, you need to supply the url prefix
  # like ghcr.io for github container
  docker_registry: 'dockerhub'

  # docker_image, must be defined either here globally or for each individual jobs
  # image name must be in one of the following formats
  # image: <image-name> (Same as using <image-name> with the latest tag)
  # image: <image-name>:<tag>
  # Note the registry value must be specified using the docker_registry key, only namespace/image:tag are allowed as value in docker_image, namespace is optional if the image is from official (like ubuntu)
  docker_image: 'ubuntu:latest'

  # Repo path to use for artifact uploads into
  # If Job configurations optionally specify artifacts to upload (Req #C5.7)
  # Then the artifact_upload_path need to be specified either here globally or
  # for the job that will upload artifacts
  artifact_upload_path: 'GitHub.com'

# stages definition (Req #C5.7) is optional. If not defined it will use the default stages name and order
# default stages: [build, test, doc, deploy]
# should only consider the stages and their order as defined in the configuration file.
# Stage names must be unique for a pipeline.
# each stage must have at least one or more jobs
# stages keyword is required at the top level to identify the section.
# stages order will be as listed under the stages keyword
stages: ['build', 'test']

jobs:
    checkout:
        stage: build
        scripts: ['git clone']

    compile:
        # stage name is required. a job can only be part of 1 stage (Req #C5.2)
        stage: build

        # allow_failure flag allow override the default behavior and allow for the pipeline execution
        # to continue even if this job has failed.
        # available values: True or False(default option)
        allow_failure: True

        # Dependencies are specified in needs section (Req #C5.6). It can be
        # no dependency - when no key-value pair is included
        # only one dependency - can be specified as needs: [<job required>]
        # more than one dependencies - specified as below
        # cycle detection check will be performed (Req #C5.6.1)
        needs: ['checkout']

        # scripts keyword is used to identify the commands to run as part of a job
        # each job must have at least 1 command (Req #C5.6)
        # multiple commands will be run in the order specified
        scripts:
          - 'poetry install'

        # artifacts keyword is used to identify the configurations for artifact processing (Req #C5.7)
        # available config key-values pair are listed and explained below
        # the artifact will be uploaded to the artifact_upload_path defined when job completed
        artifacts:
            # on_success_only: attemp to upload the artifact(s) on success only,
            # available values are True/False, by default is True
            on_success_only: True

            # paths will specify the artifact file/directory to upload (Req #C5.7.1)
            # can be a file name like README.md
            # or a directory appended with / like build/
            # or simple regex like
            # Star for any match, e.g.
                # READ* matches all files that start with READ
                # *.java matches all files that end in .java.
                # The character . is not part of our regular expression language.
                # build/*/doc/ matches all directories named classes that are one directory away from build
                # e.g. build/java/doc, build/python/doc/ match, while build/java/reports/doc does not match
            # Double star for directories at any depth
                # build/**/doc/ matches all directories, regardless how deep, that contain a doc sub directory
            # all paths must start with - prefix
            paths:
                - 'build/lib'
    
    pytest:
        stage: test
        scripts: ['poetry run pytest']